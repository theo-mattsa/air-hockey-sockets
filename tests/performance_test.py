#!/usr/bin/env python3
"""
Testes de Performance e Estabilidade para Pong Socket Game
Este m√≥dulo cont√©m testes para medir lat√™ncia, throughput e estabilidade do servidor
"""

import socket
import threading
import time
import pickle
import psutil
import os
import sys
import statistics
from concurrent.futures import ThreadPoolExecutor
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime

# Adicionar o diret√≥rio pai ao path para importar server
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Importar configura√ß√µes
from config import SERVER_HOST, SERVER_PORT, REPORTS_DIR

class PerformanceTest:
    def __init__(self, host=SERVER_HOST, port=SERVER_PORT):
        self.host = host
        self.port = port
        self.results = {
            'latency': [],
            'throughput': [],
            'cpu_usage': [],
            'memory_usage': [],
            'connection_times': [],
            'failed_connections': 0,
            'successful_connections': 0
        }
        self.test_report = []  # Lista para armazenar relat√≥rio detalhado
    
    def add_to_report(self, message):
        """Adiciona uma linha ao relat√≥rio"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.test_report.append(f"[{timestamp}] {message}")
        print(message)  # Tamb√©m exibe no console
    
    def save_report_to_file(self, test_type="performance"):
        """Salva o relat√≥rio em arquivo TXT"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"relatorio_performance_{test_type}_{timestamp}.txt"
        
        # Criar diret√≥rio se n√£o existir
        os.makedirs(REPORTS_DIR, exist_ok=True)
        filepath = os.path.join(REPORTS_DIR, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write("=" * 80 + "\n")
            f.write("              RELAT√ìRIO DE PERFORMANCE - PONG SOCKETS\n")
            f.write("=" * 80 + "\n\n")
            
            f.write(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            f.write(f"Tipo de Teste: {test_type.upper()}\n")
            f.write(f"Servidor: {self.host}:{self.port}\n\n")
            
            f.write("M√âTRICAS DE PERFORMANCE:\n")
            f.write("-" * 40 + "\n")
            
            # Lat√™ncia
            if self.results['latency']:
                avg_latency = statistics.mean(self.results['latency'])
                min_latency = min(self.results['latency'])
                max_latency = max(self.results['latency'])
                median_latency = statistics.median(self.results['latency'])
                
                f.write(f"LAT√äNCIA:\n")
                f.write(f"  M√©dia: {avg_latency:.2f}ms\n")
                f.write(f"  Mediana: {median_latency:.2f}ms\n")
                f.write(f"  M√≠nima: {min_latency:.2f}ms\n")
                f.write(f"  M√°xima: {max_latency:.2f}ms\n\n")
            
            # Conex√µes
            f.write(f"CONEX√ïES:\n")
            f.write(f"  Bem-sucedidas: {self.results['successful_connections']}\n")
            f.write(f"  Falhadas: {self.results['failed_connections']}\n")
            
            total_connections = self.results['successful_connections'] + self.results['failed_connections']
            if total_connections > 0:
                success_rate = (self.results['successful_connections'] / total_connections) * 100
                f.write(f"  Taxa de sucesso: {success_rate:.1f}%\n")
            
            if self.results['connection_times']:
                avg_conn_time = statistics.mean(self.results['connection_times'])
                f.write(f"  Tempo m√©dio de conex√£o: {avg_conn_time:.2f}ms\n")
            f.write("\n")
            
            # Recursos do Sistema
            if self.results['cpu_usage']:
                avg_cpu = statistics.mean(self.results['cpu_usage'])
                max_cpu = max(self.results['cpu_usage'])
                f.write(f"USO DE RECURSOS:\n")
                f.write(f"  CPU m√©dia: {avg_cpu:.1f}%\n")
                f.write(f"  CPU m√°xima: {max_cpu:.1f}%\n")
            
            if self.results['memory_usage']:
                avg_memory = statistics.mean(self.results['memory_usage'])
                max_memory = max(self.results['memory_usage'])
                f.write(f"  Mem√≥ria m√©dia: {avg_memory:.1f}%\n")
                f.write(f"  Mem√≥ria m√°xima: {max_memory:.1f}%\n\n")
            
            # An√°lise e Recomenda√ß√µes
            f.write("AN√ÅLISE DOS RESULTADOS:\n")
            f.write("-" * 40 + "\n")
            
            if self.results['latency']:
                avg_latency = statistics.mean(self.results['latency'])
                if avg_latency < 100:
                    f.write("‚úÖ Lat√™ncia EXCELENTE (< 100ms)\n")
                elif avg_latency < 200:
                    f.write("üü° Lat√™ncia BOA (100-200ms)\n")
                else:
                    f.write("üî¥ Lat√™ncia ALTA (> 200ms) - Otimiza√ß√£o necess√°ria\n")
            
            if total_connections > 0:
                if success_rate > 95:
                    f.write("‚úÖ Taxa de conex√£o EXCELENTE (> 95%)\n")
                elif success_rate > 85:
                    f.write("üü° Taxa de conex√£o BOA (85-95%)\n")
                else:
                    f.write("üî¥ Taxa de conex√£o BAIXA (< 85%) - Investiga√ß√£o necess√°ria\n")
            
            if self.results['cpu_usage']:
                if avg_cpu < 70:
                    f.write("‚úÖ Uso de CPU SUSTENT√ÅVEL (< 70%)\n")
                elif avg_cpu < 85:
                    f.write("üü° Uso de CPU MODERADO (70-85%)\n")
                else:
                    f.write("üî¥ Uso de CPU ALTO (> 85%) - Otimiza√ß√£o recomendada\n")
            
            f.write("\nDETALHES DA EXECU√á√ÉO:\n")
            f.write("-" * 40 + "\n")
            for line in self.test_report:
                f.write(line + "\n")
            
            f.write("\n" + "=" * 80 + "\n")
            f.write("Relat√≥rio gerado automaticamente pelo Performance Test\n")
            f.write("=" * 80 + "\n")
        
        self.add_to_report(f"üìÑ Relat√≥rio salvo em: {filename}")
        return filepath
    
    def test_latency(self, num_tests=100):
        """Testa a lat√™ncia de comunica√ß√£o com o servidor"""
        self.add_to_report(f"üß™ Iniciando teste de lat√™ncia com {num_tests} requests...")
        latencies = []
        
        for i in range(num_tests):
            try:
                start_time = time.time()
                
                # Criar conex√£o
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(5.0)
                sock.connect((self.host, self.port))
                
                # Enviar dados de teste
                test_data = {'type': 'ping', 'timestamp': start_time}
                sock.sendall(pickle.dumps(test_data))
                
                # Receber resposta
                response = sock.recv(1024)
                end_time = time.time()
                
                latency = (end_time - start_time) * 1000  # em millisegundos
                latencies.append(latency)
                
                sock.close()
                
                if i % 10 == 0:
                    self.add_to_report(f"  Progresso: {i}/{num_tests} - Lat√™ncia atual: {latency:.2f}ms")
                
            except Exception as e:
                self.add_to_report(f"  ‚ùå Erro na itera√ß√£o {i}: {e}")
                continue
        
        self.results['latency'] = latencies
        
        if latencies:
            avg_latency = statistics.mean(latencies)
            min_latency = min(latencies)
            max_latency = max(latencies)
            median_latency = statistics.median(latencies)
            
            self.add_to_report(f"üìä Resultados de Lat√™ncia:")
            self.add_to_report(f"  M√©dia: {avg_latency:.2f}ms")
            self.add_to_report(f"  Mediana: {median_latency:.2f}ms")
            self.add_to_report(f"  M√≠n: {min_latency:.2f}ms")
            self.add_to_report(f"  M√°x: {max_latency:.2f}ms")
            self.add_to_report(f"  Testes realizados: {len(latencies)}/{num_tests}")
        
        # Salvar relat√≥rio espec√≠fico de lat√™ncia
        self.save_report_to_file("latencia")
    
    def test_concurrent_connections(self, num_connections=50, duration=30):
        """Testa conex√µes simult√¢neas"""
        print(f"üîó Testando {num_connections} conex√µes simult√¢neas por {duration}s...")
        
        def create_connection(connection_id):
            try:
                start_time = time.time()
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(10.0)
                sock.connect((self.host, self.port))
                
                connection_time = time.time() - start_time
                self.results['connection_times'].append(connection_time * 1000)
                
                # Manter conex√£o ativa
                end_time = time.time() + duration
                while time.time() < end_time:
                    try:
                        test_data = {'type': 'heartbeat', 'id': connection_id}
                        sock.sendall(pickle.dumps(test_data))
                        time.sleep(1)
                    except:
                        break
                
                sock.close()
                self.results['successful_connections'] += 1
                
            except Exception as e:
                self.results['failed_connections'] += 1
                print(f"  Falha na conex√£o {connection_id}: {e}")
        
        # Executar conex√µes em paralelo
        with ThreadPoolExecutor(max_workers=num_connections) as executor:
            futures = [executor.submit(create_connection, i) for i in range(num_connections)]
            
            # Aguardar conclus√£o
            for future in futures:
                future.result()
        
        success_rate = (self.results['successful_connections'] / num_connections) * 100
        print(f"üìä Resultados de Conex√µes Simult√¢neas:")
        print(f"  Conex√µes bem-sucedidas: {self.results['successful_connections']}")
        print(f"  Conex√µes falhadas: {self.results['failed_connections']}")
        print(f"  Taxa de sucesso: {success_rate:.1f}%")
        
        if self.results['connection_times']:
            avg_conn_time = statistics.mean(self.results['connection_times'])
            print(f"  Tempo m√©dio de conex√£o: {avg_conn_time:.2f}ms")
    
    def monitor_system_resources(self, duration=60, interval=1):
        """Monitora uso de CPU e mem√≥ria durante o teste"""
        print(f"üìà Monitorando recursos do sistema por {duration}s...")
        
        start_time = time.time()
        while time.time() - start_time < duration:
            cpu_percent = psutil.cpu_percent(interval=0.1)
            memory_info = psutil.virtual_memory()
            
            self.results['cpu_usage'].append(cpu_percent)
            self.results['memory_usage'].append(memory_info.percent)
            
            time.sleep(interval)
        
        if self.results['cpu_usage']:
            avg_cpu = statistics.mean(self.results['cpu_usage'])
            max_cpu = max(self.results['cpu_usage'])
            avg_memory = statistics.mean(self.results['memory_usage'])
            max_memory = max(self.results['memory_usage'])
            
            print(f"üìä Uso de Recursos:")
            print(f"  CPU m√©dia: {avg_cpu:.1f}%")
            print(f"  CPU m√°xima: {max_cpu:.1f}%")
            print(f"  Mem√≥ria m√©dia: {avg_memory:.1f}%")
            print(f"  Mem√≥ria m√°xima: {max_memory:.1f}%")
    
    def stress_test(self, num_clients=20, duration=120):
        """Teste de stress com m√∫ltiplos clientes enviando dados continuamente"""
        print(f"üí™ Teste de stress: {num_clients} clientes por {duration}s...")
        
        def stress_client(client_id):
            messages_sent = 0
            errors = 0
            
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(5.0)
                sock.connect((self.host, self.port))
                
                start_time = time.time()
                while time.time() - start_time < duration:
                    try:
                        # Simular dados de jogo
                        game_data = {
                            'type': 'game_update',
                            'player_id': client_id,
                            'paddle_x': 480,
                            'timestamp': time.time()
                        }
                        sock.sendall(pickle.dumps(game_data))
                        messages_sent += 1
                        time.sleep(0.1)  # 10 FPS
                        
                    except Exception as e:
                        errors += 1
                        if errors > 10:  # Muitos erros, sair
                            break
                
                sock.close()
                
            except Exception as e:
                print(f"  Cliente {client_id} falhou: {e}")
                errors += 1
            
            return messages_sent, errors
        
        # Executar clientes de stress
        start_monitor_time = time.time()
        
        with ThreadPoolExecutor(max_workers=num_clients) as executor:
            # Iniciar monitoramento de recursos
            monitor_thread = threading.Thread(
                target=self.monitor_system_resources, 
                args=(duration, 1)
            )
            monitor_thread.start()
            
            # Executar clientes
            futures = [executor.submit(stress_client, i) for i in range(num_clients)]
            
            total_messages = 0
            total_errors = 0
            
            for future in futures:
                messages, errors = future.result()
                total_messages += messages
                total_errors += errors
            
            monitor_thread.join()
        
        throughput = total_messages / duration
        error_rate = (total_errors / (total_messages + total_errors)) * 100 if (total_messages + total_errors) > 0 else 0
        
        print(f"üìä Resultados do Teste de Stress:")
        print(f"  Mensagens enviadas: {total_messages}")
        print(f"  Erros: {total_errors}")
        print(f"  Throughput: {throughput:.1f} msg/s")
        print(f"  Taxa de erro: {error_rate:.2f}%")
    
    def generate_report(self):
        """Gera relat√≥rio visual dos testes"""
        print("üìà Gerando relat√≥rio visual...")
        
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        fig.suptitle('Relat√≥rio de Performance - Pong Socket Game', fontsize=16)
        
        # Gr√°fico de Lat√™ncia
        if self.results['latency']:
            axes[0, 0].hist(self.results['latency'], bins=20, alpha=0.7, color='blue')
            axes[0, 0].set_title('Distribui√ß√£o de Lat√™ncia')
            axes[0, 0].set_xlabel('Lat√™ncia (ms)')
            axes[0, 0].set_ylabel('Frequ√™ncia')
        
        # Gr√°fico de CPU
        if self.results['cpu_usage']:
            time_points = range(len(self.results['cpu_usage']))
            axes[0, 1].plot(time_points, self.results['cpu_usage'], color='red')
            axes[0, 1].set_title('Uso de CPU ao Longo do Tempo')
            axes[0, 1].set_xlabel('Tempo (s)')
            axes[0, 1].set_ylabel('CPU (%)')
        
        # Gr√°fico de Mem√≥ria
        if self.results['memory_usage']:
            time_points = range(len(self.results['memory_usage']))
            axes[1, 0].plot(time_points, self.results['memory_usage'], color='green')
            axes[1, 0].set_title('Uso de Mem√≥ria ao Longo do Tempo')
            axes[1, 0].set_xlabel('Tempo (s)')
            axes[1, 0].set_ylabel('Mem√≥ria (%)')
        
        # Gr√°fico de Conex√µes
        if self.results['connection_times']:
            axes[1, 1].hist(self.results['connection_times'], bins=15, alpha=0.7, color='orange')
            axes[1, 1].set_title('Tempo de Estabelecimento de Conex√£o')
            axes[1, 1].set_xlabel('Tempo (ms)')
            axes[1, 1].set_ylabel('Frequ√™ncia')
        
        plt.tight_layout()
        
        # Salvar no diret√≥rio de relat√≥rios
        report_path = os.path.join(REPORTS_DIR, 'performance_report.png')
        os.makedirs(REPORTS_DIR, exist_ok=True)
        plt.savefig(report_path, dpi=300, bbox_inches='tight')
        print(f"  Relat√≥rio salvo como '{report_path}'")
        plt.show()
    
    def run_full_test_suite(self):
        """Executa todos os testes de performance"""
        self.add_to_report("üöÄ Iniciando suite completa de testes de performance...")
        self.add_to_report("=" * 60)
        
        # Teste de lat√™ncia
        self.test_latency(50)
        self.add_to_report("")
        
        # Teste de conex√µes simult√¢neas
        self.test_concurrent_connections(20, 15)
        self.add_to_report("")
        
        # Teste de stress
        self.stress_test(10, 60)
        self.add_to_report("")
        
        # Gerar relat√≥rio
        self.generate_report()
        
        # Salvar relat√≥rio completo
        self.save_report_to_file("suite_completa")
        
        self.add_to_report("‚úÖ Todos os testes conclu√≠dos!")


if __name__ == "__main__":
    # Configurar teste
    tester = PerformanceTest()
    
    print("Pong Socket Game - Testes de Performance e Estabilidade")
    print("=" * 60)
    print(f"Servidor configurado: {SERVER_HOST}:{SERVER_PORT}")
    print("IMPORTANTE: Certifique-se de que o servidor est√° rodando!")
    print()
    
    input("Pressione Enter para come√ßar os testes...")
    
    # Executar testes
    tester.run_full_test_suite()
