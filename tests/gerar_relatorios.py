#!/usr/bin/env python3
"""
Script de demonstra√ß√£o para executar testes e gerar relat√≥rios TXT
"""

import os
import sys
import time
from datetime import datetime

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(__file__))

# Importar configura√ß√µes
from config import SERVER_HOST, SERVER_PORT

def print_header(title):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "=" * 70)
    print(f"  {title}")
    print("=" * 70)

def main():
    print_header("GERADOR DE RELAT√ìRIOS TXT - PONG SOCKETS TESTS")
    
    print(f"\nüîß Servidor configurado: {SERVER_HOST}:{SERVER_PORT}")
    print("   (Para alterar, edite o arquivo config.py)")
    
    print("\nEste script executa os testes e gera relat√≥rios em formato TXT.")
    print("Certifique-se de que o servidor est√° rodando antes de executar!")
    print("\nRelat√≥rios dispon√≠veis:")
    print("1. üìä Client Simulator - Simula√ß√£o de clientes")
    print("2. ‚ö° Performance Test - Testes de performance")
    print("3. üõ°Ô∏è  Stability Test - Testes de estabilidade")
    print("4. üöÄ Executar todos os testes")
    
    try:
        choice = input("\nEscolha uma op√ß√£o (1-4): ").strip()
        
        if choice == '1':
            print_header("EXECUTANDO CLIENT SIMULATOR")
            from client_simulator import LoadTestManager
            
            manager = LoadTestManager()
            print("Executando simula√ß√£o b√°sica...")
            manager.run_concurrent_game_simulation(5, 30)
            
        elif choice == '2':
            print_header("EXECUTANDO PERFORMANCE TEST")
            from performance_test import PerformanceTest
            
            tester = PerformanceTest()
            print("Executando teste de lat√™ncia...")
            tester.test_latency(20)
            
        elif choice == '3':
            print_header("EXECUTANDO STABILITY TEST")
            from stability_test import StabilityTest
            
            tester = StabilityTest()
            print("Executando teste de conex√µes r√°pidas...")
            tester.test_rapid_connections(20)
            
        elif choice == '4':
            print_header("EXECUTANDO TODOS OS TESTES")
            
            # Client Simulator
            print("\n1/3 - Executando Client Simulator...")
            from client_simulator import LoadTestManager
            manager = LoadTestManager()
            manager.run_concurrent_game_simulation(3, 20)
            time.sleep(2)
            
            # Performance Test
            print("\n2/3 - Executando Performance Test...")
            from performance_test import PerformanceTest
            perf_tester = PerformanceTest()
            perf_tester.test_latency(10)
            time.sleep(2)
            
            # Stability Test
            print("\n3/3 - Executando Stability Test...")
            from stability_test import StabilityTest
            stab_tester = StabilityTest()
            stab_tester.test_rapid_connections(10)
            
            print("\n‚úÖ Todos os testes conclu√≠dos!")
            
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
            return
            
        print("\n" + "=" * 70)
        print("üìÑ RELAT√ìRIOS GERADOS:")
        print("=" * 70)
        
        # Listar arquivos de relat√≥rio recentes
        test_dir = os.path.dirname(__file__)
        files = os.listdir(test_dir)
        report_files = [f for f in files if f.startswith('relatorio_') and f.endswith('.txt')]
        
        # Ordenar por data de modifica√ß√£o (mais recentes primeiro)
        report_files.sort(key=lambda x: os.path.getmtime(os.path.join(test_dir, x)), reverse=True)
        
        if report_files:
            print("Relat√≥rios mais recentes:")
            for i, filename in enumerate(report_files[:5], 1):
                filepath = os.path.join(test_dir, filename)
                mod_time = datetime.fromtimestamp(os.path.getmtime(filepath))
                print(f"  {i}. {filename}")
                print(f"     Criado: {mod_time.strftime('%d/%m/%Y %H:%M:%S')}")
        else:
            print("Nenhum relat√≥rio encontrado.")
            
        print(f"\nRelat√≥rios salvos em: {test_dir}")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Execu√ß√£o interrompida pelo usu√°rio")
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        print("Certifique-se de que todos os m√≥dulos est√£o no diret√≥rio correto.")
    except Exception as e:
        print(f"‚ùå Erro durante execu√ß√£o: {e}")

if __name__ == "__main__":
    main()
